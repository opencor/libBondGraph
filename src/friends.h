#ifndef _FRIENDS_H__
#define _FRIENDS_H__
/*******************************************************************************

Copyright (C) The University of Auckland

OpenCOR is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenCOR is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://gnu.org/licenses>.

*******************************************************************************/

#include "export.h"
#include "thirdparty/json.hpp"

/*
  Generated by 'resource/generateFactorMethods.py' 
  OS : Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29
  Release : 5.10.102.1-microsoft-standard-WSL2
  Version : #1 SMP Wed Mar 2 00:30:59 UTC 2022
  InstructionSet : x86_64
*/

namespace BG {
/**
* Class friend function declarations, macros are called in ElementBase.h, Elements.h and bondgraph.h
*/

/**
Source JSON used to define domains and factoryMethods
//Generated on 11 July, 2023 11:53:33

{
    "Annotation": {
        "Region": {
            "class": "annotation",
            "description": "Spatial Annotation",
            "name": "region",
            "ports": {
                "limit": 0
            },
            "shortname": "Text",
            "variableprefix": ""
        },
        "location": 7
    },
    "Biochemical": {
        "Chemostat": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 -mu"
            ],
            "description": "Constant chemical potential",
            "name": "Chemostat",
            "parameters": {
                "mu": {
                    "description": "Potential",
                    "dimension": "J/mol",
                    "value": 1
                }
            },
            "ports": {
                "0": "1"
            },
            "shortname": "SS",
            "variableprefix": "Ss"
        },
        "Concentration": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 - R*T*log(k*a_0)",
                "f_0 - da_0"
            ],
            "description": "Concentration of Chemical Species",
            "name": "Concentration",
            "parameters": {
                "R": {
                    "description": "Universal Gas Constant"
                },
                "T": {
                    "description": "Temperature"
                },
                "k": {
                    "description": "Biochemical Constant; exp(mu_0/RT)/V"
                }
            },
            "ports": {
                "0": null
            },
            "shortname": "N",
            "states": {
                "a_0": "Molar Quantity"
            }
        },
        "Flowstat": {
            "class": "passive",
            "constitutive_relations": [
                "f_0+i"
            ],
            "description": "Constant chemical flux",
            "name": "Flowstat",
            "parameters": {
                "i": {
                    "description": "Chemical Flux",
                    "dimension": "mol/s",
                    "value": 1
                }
            },
            "ports": {
                "0": "1"
            },
            "shortname": "Sf",
            "variableprefix": "Sf"
        },
        "Reaction": {
            "class": "passive",
            "constitutive_relations": [
                "f_0 + f_1",
                "f_0 - r*(exp(e_0/R/T) - exp(e_1/R/T))"
            ],
            "description": "Biochemical Reaction",
            "name": "Reaction",
            "parameters": {
                "R": {
                    "description": "Universal Gas Constant"
                },
                "T": {
                    "description": "Temperature"
                },
                "r": {
                    "description": "Reaction Rate"
                }
            },
            "ports": {
                "0": {
                    "dir": "in"
                },
                "1": {
                    "dir": "out"
                }
            },
            "shortname": "Rx"
        },
        "Stoichiometry": {
            "class": "junction",
            "constitutive_relations": [
                "r0*e_0 + r1*e_1",
                "f_0/r0 - f_1/r1"
            ],
            "description": "Stoichiometry",
            "name": "Stoichiometry",
            "parameters": {
                "r0": {
                    "description": "Affinity",
                    "dimension": "",
                    "value": -1
                },
                "r1": {
                    "description": "Chemical Power",
                    "dimension": "",
                    "value": 1
                }
            },
            "ports": {
                "0": {
                    "dir": "in"
                },
                "1": {
                    "dir": "out"
                }
            },
            "shortname": "Y"
        },
        "location": 3
    },
    "Composition": {
        "CellML": {
            "class": "userdefined",
            "description": "CellML blackbox",
            "name": "cellml",
            "ports": {
                "limit": 100
            },
            "shortname": "cm",
            "variableprefix": "CML"
        },
        "location": 6
    },
    "Electrical": {
        "BondDimensions": {
            "effort": "V",
            "flow": "A"
        },
        "Capacitance": {
            "class": "passive",
            "constitutive_relations": [
                "q_0 - C * e_0",
                "dot_q_0 - f_0"
            ],
            "description": "Linear Capacitor",
            "name": "Capacitor",
            "parameters": {
                "C": {
                    "description": "Capacitance",
                    "dimension": "Farad",
                    "value": 1
                }
            },
            "shortname": "C",
            "states": {
                "q_0": {
                    "description": "Electric charge",
                    "dimension": "coulomb",
                    "value": 0
                }
            },
            "variableprefix": "C"
        },
        "FlowSource": {
            "class": "passive",
            "constitutive_relations": [
                "f_0+i"
            ],
            "description": "Constant Current Source",
            "name": "ConstantCurrentSource",
            "parameters": {
                "i": {
                    "description": "Current",
                    "dimension": "A",
                    "value": 1
                }
            },
            "shortname": "Sf",
            "variableprefix": "Sf"
        },
        "Inductance": {
            "class": "passive",
            "constitutive_relations": [
                "p_0 - L*f_0",
                "dot_p_0 - e_0"
            ],
            "description": "Linear Inductor",
            "name": "Inductor",
            "parameters": {
                "L": {
                    "description": "Inductance",
                    "dimension": "henry",
                    "value": 1
                }
            },
            "shortname": "I",
            "states": {
                "p_0": {
                    "description": "Magetic flux",
                    "dimension": "weber",
                    "value": 0
                }
            },
            "variableprefix": "I"
        },
        "PotentialSource": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 -u"
            ],
            "description": "Constant Voltage Source",
            "name": "ConstantVoltageSource",
            "parameters": {
                "u": {
                    "description": "Voltage",
                    "dimension": "V",
                    "value": 1
                }
            },
            "shortname": "Se",
            "variableprefix": "Se"
        },
        "Resistance": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 - f_0*r"
            ],
            "description": "Linear Resistor",
            "name": "Resistor",
            "parameters": {
                "r": {
                    "description": "Resistance",
                    "dimension": "Ohm",
                    "universalConstant": false,
                    "value": 1
                }
            },
            "shortname": "R",
            "variableprefix": "R"
        },
        "location": 2
    },
    "Generic": {
        "FlowSource": {
            "class": "passive",
            "constitutive_relations": [
                "f_0+i"
            ],
            "description": "Constant Flow Source",
            "name": "ConstantFlowSource",
            "parameters": {
                "i": {
                    "description": "Current",
                    "dimension": "A",
                    "value": 1
                }
            },
            "shortname": "Gf",
            "variableprefix": "Gf"
        },
        "Gyrator": {
            "class": "junction",
            "constitutive_relations": [
                "e_1 + n*f_0",
                "e_0 - n*f_1"
            ],
            "description": "Linear Gyrator",
            "name": "Gyrator",
            "parameters": {
                "n": {
                    "description": "Ratio",
                    "dimension": "",
                    "value": 1
                }
            },
            "ports": {
                "0": {
                    "dir": "in",
                    "effort": {
                        "name": "e_",
                        "unit": "Volt"
                    },
                    "flow": {
                        "name": "f_",
                        "unit": "Ampere"
                    }
                },
                "1": {
                    "dir": "out",
                    "effort": {
                        "name": "e_",
                        "unit": "Volt"
                    },
                    "flow": {
                        "name": "f_",
                        "unit": "Ampere"
                    }
                }
            },
            "shortname": "GY",
            "variableprefix": "GY"
        },
        "OneJunction": {
            "class": "junction",
            "description": "Equal Flow Junction",
            "equate": [
                "f_"
            ],
            "name": "OneJunction",
            "ports": {
                "limit": 100
            },
            "shortname": "1",
            "variableprefix": "One"
        },
        "PotentialSource": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 -u"
            ],
            "description": "Constant Potential Source",
            "name": "ConstantPotentialSource",
            "parameters": {
                "u": {
                    "description": "Voltage",
                    "dimension": "V",
                    "value": 1
                }
            },
            "shortname": "Ge",
            "variableprefix": "Ge"
        },
        "Transformer": {
            "class": "junction",
            "constitutive_relations": [
                "e_1 - n * e_0",
                "f_0 + n * f_1"
            ],
            "description": "Linear Transformer",
            "name": "Transformer",
            "parameters": {
                "n": {
                    "description": "Ratio",
                    "dimension": "",
                    "value": 1
                }
            },
            "ports": {
                "0": {
                    "dir": "out",
                    "effort": {
                        "name": "e_",
                        "unit": "Volt"
                    },
                    "flow": {
                        "name": "f_",
                        "unit": "Ampere"
                    }
                },
                "1": {
                    "dir": "in",
                    "effort": {
                        "name": "e_",
                        "unit": "Volt"
                    },
                    "flow": {
                        "name": "f_",
                        "unit": "Ampere"
                    }
                }
            },
            "shortname": "TF",
            "variableprefix": "TF"
        },
        "ZeroJunction": {
            "class": "junction",
            "description": "Equal Effort Junction",
            "equate": [
                "e_"
            ],
            "name": "ZeroJunction",
            "ports": {
                "limit": 100
            },
            "shortname": "0",
            "variableprefix": "Zero"
        },
        "location": 1
    },
    "Hydraulic": {
        "BondDimensions": {
            "effort": "J/m^3",
            "flow": "m^3/s"
        },
        "Capacitance": {
            "class": "passive",
            "constitutive_relations": [
                "q_0 - C * e_0",
                "dot_q_0 - f_0"
            ],
            "description": "Vessal wall compliance",
            "name": "FluidCompliance",
            "parameters": {
                "C": {
                    "description": "Compliance",
                    "dimension": "m^6/J",
                    "value": 1
                }
            },
            "shortname": "C",
            "states": {
                "q_0": {
                    "description": "Liquid volume",
                    "dimension": "m^3",
                    "value": 0
                }
            },
            "variableprefix": "C"
        },
        "FlowSource": {
            "class": "passive",
            "constitutive_relations": [
                "f_0+nu"
            ],
            "description": "Constant Fluid Flow Source",
            "name": "ConstantFluidFlowSource",
            "parameters": {
                "nu": {
                    "description": "Flow rate",
                    "dimension": "m^3/s",
                    "value": 1
                }
            },
            "shortname": "Sf",
            "variableprefix": "Sf"
        },
        "Inductance": {
            "class": "passive",
            "constitutive_relations": [
                "p_0 - L*f_0",
                "dot_p_0 - e_0"
            ],
            "description": "Fluid Inertia",
            "name": "FluidInertance",
            "parameters": {
                "L": {
                    "description": "Inertance",
                    "dimension": "J*s^2/m^6",
                    "value": 1
                }
            },
            "shortname": "I",
            "states": {
                "p_0": {
                    "description": "Fluid momentum",
                    "dimension": "J*s/m^3",
                    "value": 0
                }
            },
            "variableprefix": "I"
        },
        "PotentialSource": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 -u"
            ],
            "description": "Constant Pressure Source",
            "name": "ConstantPressureSource",
            "parameters": {
                "u": {
                    "description": "Pressure",
                    "dimension": "J/m^3",
                    "value": 1
                }
            },
            "shortname": "Se",
            "variableprefix": "Se"
        },
        "Resistance": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 - f_0*r"
            ],
            "description": "Viscous Resistance",
            "name": "ViscousResistance",
            "parameters": {
                "r": {
                    "description": "Resistance",
                    "dimension": "J*s/m^6",
                    "universalConstant": false,
                    "value": 1
                }
            },
            "shortname": "R",
            "variableprefix": "R"
        },
        "location": 2
    },
    "Mechanical": {
        "BondDimensions": {
            "effort": "N",
            "flow": "m/s"
        },
        "Capacitance": {
            "class": "passive",
            "constitutive_relations": [
                "x_0 - e_0/k",
                "dot_x_0 - f_0"
            ],
            "description": "Linear Elastic Spring",
            "name": "LinearSpring",
            "parameters": {
                "k": {
                    "description": "Stiffness",
                    "dimension": "N/m",
                    "value": 1
                }
            },
            "shortname": "k",
            "states": {
                "x_0": {
                    "description": "Displacement",
                    "dimension": "m",
                    "value": 0
                }
            },
            "variableprefix": "k"
        },
        "FlowSource": {
            "class": "passive",
            "constitutive_relations": [
                "f_0+v"
            ],
            "description": "Constant Linear Velocity",
            "name": "ConstantVelocity",
            "parameters": {
                "v": {
                    "description": "Velocity",
                    "dimension": "m/s",
                    "value": 1
                }
            },
            "shortname": "v",
            "variableprefix": "v"
        },
        "Inductance": {
            "class": "passive",
            "constitutive_relations": [
                "p_0 - m*f_0",
                "dot_p_0 - e_0"
            ],
            "description": "Mass",
            "name": "Mass",
            "parameters": {
                "m": {
                    "description": "Mass",
                    "dimension": "kg",
                    "value": 1
                }
            },
            "shortname": "I",
            "states": {
                "p_0": {
                    "description": "Linear Momentum",
                    "dimension": "kg*m/s",
                    "value": 0
                }
            },
            "variableprefix": "I"
        },
        "PotentialSource": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 -f"
            ],
            "description": "Constant Point Force",
            "name": "ConstantForce",
            "parameters": {
                "f": {
                    "description": "force",
                    "dimension": "N",
                    "value": 1
                }
            },
            "shortname": "F",
            "variableprefix": "F"
        },
        "Resistance": {
            "class": "passive",
            "constitutive_relations": [
                "e_0 - f_0*r"
            ],
            "description": "Linear damping",
            "name": "LinearDamper",
            "parameters": {
                "r": {
                    "description": "Damping",
                    "dimension": "N*s/m",
                    "universalConstant": false,
                    "value": 1
                }
            },
            "shortname": "R",
            "variableprefix": "R"
        },
        "location": 4
    }
}

*/
#define DEFINE_FRIENDS_OF_CAPACITANCE \
	friend RCPLIB::RCP<BGElement> createCapacitor(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createLinearSpring(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createFluidCompliance(const RCPLIB::RCP< BGElementData > &proxy);
#define DEFINE_FRIENDS_OF_INDUCTANCE \
	friend RCPLIB::RCP<BGElement> createInductor(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createMass(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createFluidInertance(const RCPLIB::RCP< BGElementData > &proxy);
#define DEFINE_FRIENDS_OF_RESISTANCE \
	friend RCPLIB::RCP<BGElement> createResistor(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createLinearDamper(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createViscousResistance(const RCPLIB::RCP< BGElementData > &proxy);
#define DEFINE_FRIENDS_OF_EFFORTSOURCE \
	friend RCPLIB::RCP<BGElement> createConstantVoltageSource(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createConstantForce(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createConstantPressureSource(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createConstantPotentialSource(const RCPLIB::RCP< BGElementData > &proxy);
#define DEFINE_FRIENDS_OF_FLOWSOURCE \
	friend RCPLIB::RCP<BGElement> createConstantCurrentSource(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createConstantVelocity(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createConstantFluidFlowSource(const RCPLIB::RCP< BGElementData > &proxy);	\
	friend RCPLIB::RCP<BGElement> createConstantFlowSource(const RCPLIB::RCP< BGElementData > &proxy);


//Physical domain bond dimensions
#define DEFINE_PHYSICAL_DOMAINS \
	std::unordered_map<std::string,std::tuple<std::string,std::string> > portDimensions = { \
		{"Electrical",std::make_tuple("V","A")}, \
		{"Mechanical",std::make_tuple("N","m/s")}, \
		{"Hydraulic",std::make_tuple("J/m^3","m^3/s")}\
	};


//Reversing strings to optimise string comparisions as most methods start with create
#define CALL_FACTORY_METHODS_BY_NAME \
	std::string rMethodName(methodName.rbegin(),methodName.rend()); \
	RCPLIB::RCP<BGElementData> data = RCPLIB::null;  \
	if(rMethodName=="roticapaCetaerc") {return createCapacitor(data);} \
	else if(rMethodName=="rotcudnIetaerc") {return createInductor(data);} \
	else if(rMethodName=="rotsiseRetaerc") {return createResistor(data);} \
	else if(rMethodName=="ecruoSegatloVtnatsnoCetaerc") {return createConstantVoltageSource(data);} \
	else if(rMethodName=="ecruoStnerruCtnatsnoCetaerc") {return createConstantCurrentSource(data);} \
	else if(rMethodName=="gnirpSraeniLetaerc") {return createLinearSpring(data);} \
	else if(rMethodName=="ssaMetaerc") {return createMass(data);} \
	else if(rMethodName=="repmaDraeniLetaerc") {return createLinearDamper(data);} \
	else if(rMethodName=="ecroFtnatsnoCetaerc") {return createConstantForce(data);} \
	else if(rMethodName=="yticoleVtnatsnoCetaerc") {return createConstantVelocity(data);} \
	else if(rMethodName=="ecnailpmoCdiulFetaerc") {return createFluidCompliance(data);} \
	else if(rMethodName=="ecnatrenIdiulFetaerc") {return createFluidInertance(data);} \
	else if(rMethodName=="ecnatsiseRsuocsiVetaerc") {return createViscousResistance(data);} \
	else if(rMethodName=="ecruoSerusserPtnatsnoCetaerc") {return createConstantPressureSource(data);} \
	else if(rMethodName=="ecruoSwolFdiulFtnatsnoCetaerc") {return createConstantFluidFlowSource(data);} \
	else if(rMethodName=="noitcaeRetaerc") {return createReaction(data);} \
	else if(rMethodName=="noitartnecnoCetaerc") {return createConcentration(data);} \
	else if(rMethodName=="tatsomehCetaerc") {return createChemostat(data);} \
	else if(rMethodName=="tatswolFetaerc") {return createFlowstat(data);} \
	else if(rMethodName=="ecruoSlaitnetoPtnatsnoCetaerc") {return createConstantPotentialSource(data);} \
	else if(rMethodName=="ecruoSwolFtnatsnoCetaerc") {return createConstantFlowSource(data);} \
	else if(rMethodName=="remrofsnarTetaerc") {return createTransformer(data);} \
	else if(rMethodName=="rotaryGetaerc") {return createGyrator(data);} \
	else if(rMethodName=="noitcnuJenOetaerc") {return createOneJunction(data);} \
	else if(rMethodName=="noitcnuJoreZetaerc") {return createZeroJunction(data);} \
	else if(rMethodName=="nainotlimaHtroPetaerc") {nlohmann::json j = nlohmann::json::parse(expr); std::vector<std::string> states = j["states"]; return createPortHamiltonian(j["Hamiltonian"],states,data);} \
	else if(rMethodName=="denifeDresUetaerc") {return createUserDefined(data);} \

}
#endif
